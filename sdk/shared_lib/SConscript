Import("""
    build_arch
    configuration
    lib_suffix
    pfile_lib
    platform
    qt_lib_path
    env
    target_arch
""")

Import("""
    common_lib
    consent_lib
    core_lib
    crypto_lib
    crypto_api_obj_files
    crypto_platform_crypto_lib
    crypto_platform_keystorage_lib
    crypto_platform_logger_lib
    crypto_platform_settings_lib
    googletest_lib
    json_lib
    modernapi_obj_files
    rms_platform_filesystem_lib
    rms_platform_http_lib
    rms_platform_json_lib
    rms_platform_logger_lib
    rms_platform_settings_lib
    rms_platform_xml_lib
    restclients_lib
""")

rmsdll_env = env.Clone()

# rmsdll_env.Append(CPPDEFINES = ['RMS_LIBRARY'])
rmsdll_env.Append(CCFLAGS=Split('-DQT_PLUGIN -DQT_XML_LIB -DQT_XMLPATTERNS_LIB -DQT_NETWORK_LIB -DQT_WIDGETS_LIB -DQT_GUI_LIB'))
rmsdll_env.Append(CXXFLAGS=Split('-DQT_PLUGIN -DQT_XML_LIB -DQT_XMLPATTERNS_LIB -DQT_NETWORK_LIB -DQT_WIDGETS_LIB -DQT_GUI_LIB'))

src_files = Glob('*.cpp')
rmsdll_env.Append(CPPPATH='#sdk/rmscrypto_sdk/CryptoAPI')

lib_path = [
    qt_lib_path,
]
objects = [  
  crypto_lib,
  crypto_api_obj_files,
  crypto_platform_keystorage_lib,
  crypto_platform_crypto_lib,
  crypto_platform_logger_lib,
  crypto_platform_settings_lib,
  common_lib,
  consent_lib,
  core_lib,
  googletest_lib,
  pfile_lib,
  json_lib,
  modernapi_obj_files,
  rms_platform_filesystem_lib,
  rms_platform_http_lib,
  rms_platform_json_lib,
  rms_platform_logger_lib,
  rms_platform_settings_lib,
  rms_platform_xml_lib,
  restclients_lib,
]
libs = [
  'Qt5Core' + lib_suffix,
  'Qt5Network' + lib_suffix,
  'Qt5Widgets' + lib_suffix,
  'Qt5Xml' + lib_suffix,
  'Qt5XmlPatterns' + lib_suffix,
  'DnsAPI',
]

if platform == 'win32':
  rmsdll_env.Append(LINKFLAGS=Split('/NOLOGO /DYNAMICBASE /NXCOMPAT /DLL /MACHINE:'+build_arch+' /SUBSYSTEM:WINDOWS'))
  if configuration == 'debug':
      rmsdll_env.Append(LINKFLAGS=Split('/DEBUG'))
  elif configuration == 'release':
      rmsdll_env.Append(LINKFLAGS=Split('/INCREMENTAL:NO'))
  lib_path += [
    '#third_party/lib/eay',
  ]
  libs += [
      'libeay32',
      'ssleay32',
      'Advapi32',
      'Gdi32',
      'User32',
      'legacy_stdio_definitions',
  ]  
elif platform == '__linux__':
  rmscryptodll_env.Append(CPPPATH='/usr/include/glib-2.0/')
  rmscryptodll_env.Append(CPPPATH='/usr/include/libsecret-1/')
  rmscryptodll_env.Append(CPPPATH='/usr/lib/x86_64-linux-gnu/glib-2.0/include/')
  libs += [
      'ssl'
      'crypto'
      'secret-1'
      'glib-2.0'
  ]
elif platform == 'darwin':
  libs += 'ssl'
  libs += 'crypto'

rms_lib = rmsdll_env.SharedLibrary(target = "rms", source = objects, LIBS = libs, LIBPATH = lib_path)
Return('rms_lib')
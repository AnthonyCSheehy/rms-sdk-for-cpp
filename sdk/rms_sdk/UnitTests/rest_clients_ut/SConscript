from build_config import *

Import("""
    rms_env
    platform
    common_lib
    consent_lib
    core_lib
    googletest_lib
    json_lib
    modernapi_lib
    pfile_lib
    qt_lib_path
    rms_platform_filesystem_lib
    rms_platform_http_lib
    rms_platform_json_lib
    rms_platform_logger_lib
    rms_platform_settings_lib
    rms_platform_xml_lib
    restclients_lib
    crypto_lib
""")

rms_rest_clients_ut_env = rms_env.Clone()

src_files = Glob('*.cpp')
src_files += Glob('debug/*.cpp')
# src_files += Glob('#sdk/rms_sdk/RestClients/*.cpp')
# src_files += Glob('#sdk/rms_sdk/ModernAPI/*.cpp')
# src_files += Glob('#sdk/rms_sdk/Platform/Http/*.cpp')
# src_files += Glob('#sdk/rms_sdk/Platform/Settings/*.cpp')
# src_files += Glob('#sdk/rms_sdk/Platform/Logger/*.cpp')
# src_files += Glob('#sdk/rms_sdk/Json/*.cpp')

# rms_rest_clients_ut_env.Append(CPPPATH='#sdk/rms_sdk/RestClients')
rms_rest_clients_ut_env.Append(CPPPATH='#sdk/rmscrypto_sdk/CryptoAPI')
rms_rest_clients_ut_env.Append(CPPPATH='#sdk/rmscrypto_sdk/Platform/Settings')
rms_rest_clients_ut_env.Append(CPPPATH='#sdk/rms_sdk/RestClients')
rms_rest_clients_ut_env.Append(CPPPATH='#sdk/rms_sdk/Platform/Http')
rms_rest_clients_ut_env.Append(CPPPATH='#sdk/rms_sdk/Platform/Json')
rms_rest_clients_ut_env.Append(CPPPATH='#sdk/rms_sdk/Platform/Logger')
rms_rest_clients_ut_env.Append(CPPPATH='#sdk/rms_sdk/Platform/Settings')
rms_rest_clients_ut_env.Append(CPPPATH='#sdk/rms_sdk/Platform/Xml')


# srcdir = "\\" + "\"" + Dir('.').srcnode().abspath + "/\\\""
srcdir = "\\\"E:/rms-sdk-for-cpp/sdk/rms_sdk/UnitTests/rest_clients_ut/\\\""

rms_rest_clients_ut_env.Append(CPPDEFINES = { 'SRCDIR' : srcdir })
print srcdir

if platform == 'win32':
  rms_rest_clients_ut_env.Append(CCFLAGS=Split('-DUNICODE -DWIN32 -DQT_XMLPATTERNS_LIB -DQT_NETWORK_LIB -DQT_XML_LIB -DQT_TESTLIB_LIB -DQT_CORE_LIB'))
  rms_rest_clients_ut_env.Append(CCFLAGS=Split('-nologo -Zc:wchar_t -FS -Zc:strictStrings -Zi -MDd -W3 -w44456 -w44457 -w44458'))
  rms_rest_clients_ut_env.Append(CXXFLAGS=Split('-DUNICODE -DWIN32 -DQT_XMLPATTERNS_LIB -DQT_NETWORK_LIB -DQT_XML_LIB -DQT_TESTLIB_LIB -DQT_CORE_LIB'))
  rms_rest_clients_ut_env.Append(CXXFLAGS=Split('-nologo -Zc:wchar_t -FS -Zc:strictStrings -Zc:throwingNew -Zi -MDd -GR -W3 -w34100 -w34189 -w44996 -w44456 -w44457 -w44458 -wd4577 -EHsc'))
  rms_rest_clients_ut_env.Append(LINKFLAGS=Split('/NOLOGO /DYNAMICBASE /NXCOMPAT /DEBUG /SUBSYSTEM:CONSOLE'))

lib_path = [
    '#bin/Debug/amd64/sdk',
    '#bin/Debug/amd64/sdk/rms_sdk',
    '#bin/Debug/amd64/sdk/rmscrypto_sdk',
    '#third_party/lib/eay',
    qt_lib_path,
]

libs = [
    common_lib,
    consent_lib,
    core_lib,
    crypto_lib,
    googletest_lib,
    json_lib,
    modernapi_lib,
    pfile_lib,
    rms_platform_filesystem_lib,
    rms_platform_http_lib,
    rms_platform_json_lib,
    rms_platform_logger_lib,
    rms_platform_settings_lib,
    rms_platform_xml_lib,
    restclients_lib
]
if platform == 'win32':
  libs = [
    'Qt5Cored',
    'Qt5Networkd',
    'Qt5Xmld',
    'Qt5XmlPatternsd',
    'Qt5Testd',
    'libeay32',
    'ssleay32',
    'advapi32',
    'gdi32',
    'user32',
    'restclients',
    'rms_platform_filesystem',
    'rms_platform_http',
    'rms_platform_json',
    'rms_platform_logger',
    'rms_platform_settings',
    'rms_platform_xml',
    'crypto_platform_crypto',
    'crypto_platform_settings',
    'crypto_api',
  ]
else:
  # i dont know about this
  libs += 'ssl'
  libs += 'crypto'

rest_clients_ut_obj = rms_rest_clients_ut_env.Object(source = src_files)
rest_clients_test = rms_rest_clients_ut_env.Program(target = "rest_clients_ut", source = [rest_clients_ut_obj], LIBS = [libs], LIBPATH=lib_path)
Return('rest_clients_test')
from build_config import *

Import("""
    target_arch
    configuration
    lib_suffix
    qt_lib_path
    platform
    rms_env
""")

Import("""
    common_obj
    crypto_api_obj
    crypto_obj
    crypto_platform_crypto_obj
    crypto_platform_keystorage_obj
    crypto_platform_logger_obj
    crypto_platform_settings_obj
    googletest_obj
    json_obj
    restclients_obj
    rms_platform_filesystem_obj
    rms_platform_http_obj
    rms_platform_json_obj
    rms_platform_logger_obj
    rms_platform_settings_obj
    rms_platform_xml_obj
""")

src_files = Glob('*.cpp')
src_files += Glob(configuration + '/*.cpp')

rms_env.Append(CPPPATH='#sdk/rmscrypto_sdk/CryptoAPI')

srcdir = Dir('.').srcnode().abspath.replace('\\','/')
rms_env.Append(CPPDEFINES = { 'SRCDIR' : srcdir })

lib_path = [
    qt_lib_path,
    '#bin/' + configuration + '/' + target_arch + '/sdk',
]

objects = [
    common_obj,
    crypto_api_obj,
    crypto_obj,
    crypto_platform_crypto_obj,
    crypto_platform_keystorage_obj,
    crypto_platform_logger_obj,
    crypto_platform_settings_obj,
    googletest_obj,
    json_obj,
    restclients_obj,
    rms_platform_filesystem_obj,
    rms_platform_http_obj,
    rms_platform_json_obj,
    rms_platform_logger_obj,
    rms_platform_settings_obj,
    rms_platform_xml_obj,
]
libs = [
    'Qt5Core' + lib_suffix,
    'Qt5Network' + lib_suffix,
    'Qt5Xml' + lib_suffix,
    'Qt5XmlPatterns' + lib_suffix,
    'Qt5Test' + lib_suffix,
    'Qt5Gui' + lib_suffix,
]

if platform == 'win32':
  rms_env.Append(LINKFLAGS=Split('/NOLOGO /DYNAMICBASE /NXCOMPAT /SUBSYSTEM:CONSOLE'))
  if configuration == 'debug':
    rms_env.Append(LINKFLAGS=Split('/DEBUG'))
  elif configuration == 'release':
    rms_env.Append(LINKFLAGS=Split('/INCREMENTAL:NO'))
  libs += [    
    'libeay32',
    'ssleay32',
    'Advapi32',
    'Gdi32',
    'User32',
    'DnsAPI',
    'rms', 
  ]
  lib_path += [
    '#third_party/lib/eay',
  ]
elif platform == 'linux2':
  rms_env.Append(CCFLAGS=Split('-DQT_QML_DEBUG'))
  rms_env.Append(CPPPATH='/usr/include/glib-2.0/')
  rms_env.Append(CPPPATH='/usr/include/libsecret-1/')
  rms_env.Append(CPPPATH='/usr/lib/x86_64-linux-gnu/glib-2.0/include/')
  rms_env.Append(LINKFLAGS=Split('-Wl,-rpath,/home/admuller/Qt/5.7/gcc_64/lib'))

  lib_path += [
      '/usr/lib/x86_64-linux-gnu/',
      '/home/admuller/Qt/5.7/gcc_64/lib/',
      '/usr/lib64',
  ]
  libs +=[
      'ssl',
      'crypto',
      'secret-1',
      'glib-2.0',
      'pthread',
      'GL',
      'resolv',
  ]
else:
  libs += 'ssl'
  libs += 'crypto'

rest_clients_ut_obj = rms_env.Object(source = src_files)
rest_clients_test = rms_env.Program(target = "rest_clients_ut", 
    source = [rest_clients_ut_obj] + objects, LIBS = [libs], LIBPATH = lib_path)
Return('rest_clients_test')
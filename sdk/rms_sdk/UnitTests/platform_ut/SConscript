import os.path
from build_config import *

Import("""
    configuration
    lib_suffix
    platform
    qt_lib_path
    rms_env
""")

Import("""    
    googletest_lib
    modernapi_lib
    rms_platform_filesystem_lib
    rms_platform_http_lib
    rms_platform_json_lib
    rms_platform_logger_lib
    rms_platform_settings_lib
    rms_platform_xml_lib
""")

src_files = Glob('*.cpp')
src_files += Glob('debug/*.cpp')

rmsplatform_env = rms_env.Clone()

rmsplatform_env.Append(CPPPATH='#sdk/rmscrypto_sdk/CryptoAPI')

srcdir = '\\\"' + Dir('.').srcnode().abspath.replace('\\','/') + '/\\\"'
rmsplatform_env.Append(CPPDEFINES = { 'SRCDIR' : srcdir })

if platform == 'win32':
  rmsplatform_env.Append(CPPPATH='#third_party/include')
  rmsplatform_env.Append(CPPPATH='#googletest/include')
  rmsplatform_env.Append(CCFLAGS=Split('-DQT_XMLPATTERNS_LIB -DQT_NETWORK_LIB -DQT_XML_LIB -DQT_TESTLIB_LIB'))
  rmsplatform_env.Append(LINKFLAGS=Split('/NOLOGO /DYNAMICBASE /NXCOMPAT /SUBSYSTEM:CONSOLE'))
  if configuration == 'debug':
    rmsplatform_env.Append(LINKFLAGS=Split('/DEBUG'))
  elif configuration == 'release':
    rmsplatform_env.Append(LINKFLAGS=Split('/INCREMENTAL:NO'))
elif platform == '__linux__':
  rmsplatform_env.Append(CPPPATH='/usr/include/glib-2.0/')
  rmsplatform_env.Append(CPPPATH='/usr/include/libsecret-1/')
  rmsplatform_env.Append(CPPPATH='/usr/lib/x86_64-linux-gnu/glib-2.0/include/')

libs = [
      googletest_lib,
      modernapi_lib,
      rms_platform_filesystem_lib,
      rms_platform_http_lib,
      rms_platform_json_lib,
      rms_platform_logger_lib,
      rms_platform_settings_lib,
      rms_platform_xml_lib,
      'rmscrypto',     
]
if platform == 'win32':
  lib_path = [
      qt_lib_path, 
      '#third_party/lib/eay',
      '#bin/debug/amd64/sdk/rmscrypto_sdk',
  ]
  rmsplatform_env.Replace(LIBPATH=lib_path)
  libs += [
      'Qt5Core' + lib_suffix,
      'Qt5Test' + lib_suffix,
      'Qt5Network' + lib_suffix,
      'Qt5Xml' + lib_suffix,
      'Qt5XmlPatterns' + lib_suffix,
      'libeay32',
      'ssleay32',
      'Advapi32',
      'Gdi32',
      'User32',
  ]
else:
  libs += 'ssl'
  libs += 'crypto'

platform_ut_obj = rmsplatform_env.Object(source = src_files)
platform_ut_test = rmsplatform_env.Program(target = "platform_ut", \
    source = [platform_ut_obj], LIBS = [libs], LIBPATH = lib_path)
Return('platform_ut_test')
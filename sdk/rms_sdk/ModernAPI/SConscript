from build_config import create_objs

Import("""
    configuration
    lib_suffix
    pfile_lib
    platform
    qt_lib_path
    rms_env
""")

Import("""
    common_lib
    consent_lib
    core_lib
    googletest_lib
    json_lib
    rms_platform_filesystem_lib
    rms_platform_http_lib
    rms_platform_json_lib
    rms_platform_logger_lib
    rms_platform_settings_lib
    rms_platform_xml_lib
    restclients_lib
""")

modernapi_env = rms_env.Clone()

modernapi_env.Append(CPPDEFINES = ['RMS_LIBRARY'])

modernapi_env.Append(CCFLAGS=Split('-DRMS_LIBRARY -DQT_PLUGIN -DQT_XML_LIB -DQT_XMLPATTERNS_LIB -DQT_NETWORK_LIB -DQT_WIDGETS_LIB -DQT_GUI_LIB'))
modernapi_env.Append(CXXFLAGS=Split('-DRMS_LIBRARY -DQT_PLUGIN -DQT_XML_LIB -DQT_XMLPATTERNS_LIB -DQT_NETWORK_LIB -DQT_WIDGETS_LIB -DQT_GUI_LIB'))

src_files = Glob('*.cpp')
modernapi_env.Append(CPPPATH='#sdk/rmscrypto_sdk/CryptoAPI')

libs = [
  core_lib,
  googletest_lib,
  pfile_lib,
  rms_platform_filesystem_lib,
  rms_platform_http_lib,
  rms_platform_json_lib,
  rms_platform_logger_lib,
  rms_platform_settings_lib,
  rms_platform_xml_lib,
]

if platform == 'win32':
  modernapi_env.Append(LINKFLAGS=Split('/NOLOGO /DYNAMICBASE /NXCOMPAT /DLL /SUBSYSTEM:WINDOWS'))
  if configuration == 'debug':
      modernapi_env.Append(LINKFLAGS=Split('/DEBUG'))
  elif configuration == 'release':
      modernapi_env.Append(LINKFLAGS=Split('/INCREMENTAL:NO'))

  libs += [
      'Qt5Core' + lib_suffix,
      'Qt5Test' + lib_suffix,
      'Qt5Widgets' + lib_suffix,
      'rmscrypto',
      'libeay32',
      'ssleay32',
      'Advapi32',
      'Gdi32',
      'User32',
  ]
  lib_path = [
    qt_lib_path,
    '#third_party/lib/eay',
    '#bin/' + configuration + '/' + platform + '/sdk/rmscrypto_sdk',
  ]
else:
  libs += 'ssl'
  libs += 'crypto'

modernapi_obj_files = create_objs(modernapi_env, src_files)
modernapi_lib = modernapi_env.Library(target = "modernapi", source = modernapi_obj_files, LIBS = libs, LIBPATH = lib_path)
Return('modernapi_lib modernapi_obj_files')